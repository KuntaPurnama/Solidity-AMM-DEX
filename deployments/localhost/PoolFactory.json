{
  "address": "0x5FC8d32690cc91D4c39d9d3abcBD16989F875707",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "token0",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "token1",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "fee",
          "type": "uint8"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "poolAddress",
          "type": "address"
        }
      ],
      "name": "PoolCreated",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token0",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "token1",
          "type": "address"
        },
        {
          "internalType": "uint8",
          "name": "fee",
          "type": "uint8"
        }
      ],
      "name": "createPool",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getNumberOfPool",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getPoolDetails",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "id",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "token0",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "token1",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "reserve0",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "reserve1",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "totalSupply",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "liquidityToken",
              "type": "address"
            },
            {
              "internalType": "uint8",
              "name": "fee",
              "type": "uint8"
            }
          ],
          "internalType": "struct PoolFactory.PoolData[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x2921d2e0ce4e6ca1e5f50ff70341cb6e70b77ac07665356188515eb5d98833db",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0x5FC8d32690cc91D4c39d9d3abcBD16989F875707",
    "transactionIndex": 0,
    "gasUsed": "3234585",
    "logsBloom": "0x
    "blockHash": "0xeedd2d4c2ac3214387723ce99f258ad4de76199a7bd82ecf758f689bebf404ed",
    "transactionHash": "0x2921d2e0ce4e6ca1e5f50ff70341cb6e70b77ac07665356188515eb5d98833db",
    "logs": [],
    "blockNumber": 6,
    "cumulativeGasUsed": "3234585",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "c2b3fd2bda08fa8891691b6d24919e7e",
  "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token0\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token1\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"fee\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"poolAddress\",\"type\":\"address\"}],\"name\":\"PoolCreated\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token0\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token1\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"fee\",\"type\":\"uint8\"}],\"name\":\"createPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNumberOfPool\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPoolDetails\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"token0\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token1\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"reserve0\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reserve1\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalSupply\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"liquidityToken\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"fee\",\"type\":\"uint8\"}],\"internalType\":\"struct PoolFactory.PoolData[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/pool/PoolFactory.sol\":\"PoolFactory\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/interfaces/draft-IERC6093.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/draft-IERC6093.sol)\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard ERC20 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC20 tokens.\\n */\\ninterface IERC20Errors {\\n    /**\\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param balance Current balance for the interacting account.\\n     * @param needed Minimum amount required to perform a transfer.\\n     */\\n    error ERC20InsufficientBalance(address sender, uint256 balance, uint256 needed);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC20InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC20InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `spender`\\u2019s `allowance`. Used in transfers.\\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\\n     * @param allowance Amount of tokens a `spender` is allowed to operate with.\\n     * @param needed Minimum amount required to perform a transfer.\\n     */\\n    error ERC20InsufficientAllowance(address spender, uint256 allowance, uint256 needed);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC20InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `spender` to be approved. Used in approvals.\\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC20InvalidSpender(address spender);\\n}\\n\\n/**\\n * @dev Standard ERC721 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC721 tokens.\\n */\\ninterface IERC721Errors {\\n    /**\\n     * @dev Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in EIP-20.\\n     * Used in balance queries.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC721InvalidOwner(address owner);\\n\\n    /**\\n     * @dev Indicates a `tokenId` whose `owner` is the zero address.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC721NonexistentToken(uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates an error related to the ownership over a particular token. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param tokenId Identifier number of a token.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC721IncorrectOwner(address sender, uint256 tokenId, address owner);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC721InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC721InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC721InsufficientApproval(address operator, uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC721InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC721InvalidOperator(address operator);\\n}\\n\\n/**\\n * @dev Standard ERC1155 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC1155 tokens.\\n */\\ninterface IERC1155Errors {\\n    /**\\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param balance Current balance for the interacting account.\\n     * @param needed Minimum amount required to perform a transfer.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC1155InsufficientBalance(address sender, uint256 balance, uint256 needed, uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC1155InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC1155InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC1155MissingApprovalForAll(address operator, address owner);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC1155InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC1155InvalidOperator(address operator);\\n\\n    /**\\n     * @dev Indicates an array length mismatch between ids and values in a safeBatchTransferFrom operation.\\n     * Used in batch transfers.\\n     * @param idsLength Length of the array of token identifiers\\n     * @param valuesLength Length of the array of token amounts\\n     */\\n    error ERC1155InvalidArrayLength(uint256 idsLength, uint256 valuesLength);\\n}\\n\",\"keccak256\":\"0x60c65f701957fdd6faea1acb0bb45825791d473693ed9ecb34726fdfaa849dd7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"./IERC20.sol\\\";\\nimport {IERC20Metadata} from \\\"./extensions/IERC20Metadata.sol\\\";\\nimport {Context} from \\\"../../utils/Context.sol\\\";\\nimport {IERC20Errors} from \\\"../../interfaces/draft-IERC6093.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * The default value of {decimals} is 18. To change this, you should override\\n * this function so it returns a different value.\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n */\\nabstract contract ERC20 is Context, IERC20, IERC20Metadata, IERC20Errors {\\n    mapping(address account => uint256) private _balances;\\n\\n    mapping(address account => mapping(address spender => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the default value returned by this function, unless\\n     * it's overridden.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `value`.\\n     */\\n    function transfer(address to, uint256 value) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, value);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `value` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 value) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, value);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `value`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `value`.\\n     */\\n    function transferFrom(address from, address to, uint256 value) public virtual returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, value);\\n        _transfer(from, to, value);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * NOTE: This function is not virtual, {_update} should be overridden instead.\\n     */\\n    function _transfer(address from, address to, uint256 value) internal {\\n        if (from == address(0)) {\\n            revert ERC20InvalidSender(address(0));\\n        }\\n        if (to == address(0)) {\\n            revert ERC20InvalidReceiver(address(0));\\n        }\\n        _update(from, to, value);\\n    }\\n\\n    /**\\n     * @dev Transfers a `value` amount of tokens from `from` to `to`, or alternatively mints (or burns) if `from`\\n     * (or `to`) is the zero address. All customizations to transfers, mints, and burns should be done by overriding\\n     * this function.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _update(address from, address to, uint256 value) internal virtual {\\n        if (from == address(0)) {\\n            // Overflow check required: The rest of the code assumes that totalSupply never overflows\\n            _totalSupply += value;\\n        } else {\\n            uint256 fromBalance = _balances[from];\\n            if (fromBalance < value) {\\n                revert ERC20InsufficientBalance(from, fromBalance, value);\\n            }\\n            unchecked {\\n                // Overflow not possible: value <= fromBalance <= totalSupply.\\n                _balances[from] = fromBalance - value;\\n            }\\n        }\\n\\n        if (to == address(0)) {\\n            unchecked {\\n                // Overflow not possible: value <= totalSupply or value <= fromBalance <= totalSupply.\\n                _totalSupply -= value;\\n            }\\n        } else {\\n            unchecked {\\n                // Overflow not possible: balance + value is at most totalSupply, which we know fits into a uint256.\\n                _balances[to] += value;\\n            }\\n        }\\n\\n        emit Transfer(from, to, value);\\n    }\\n\\n    /**\\n     * @dev Creates a `value` amount of tokens and assigns them to `account`, by transferring it from address(0).\\n     * Relies on the `_update` mechanism\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * NOTE: This function is not virtual, {_update} should be overridden instead.\\n     */\\n    function _mint(address account, uint256 value) internal {\\n        if (account == address(0)) {\\n            revert ERC20InvalidReceiver(address(0));\\n        }\\n        _update(address(0), account, value);\\n    }\\n\\n    /**\\n     * @dev Destroys a `value` amount of tokens from `account`, lowering the total supply.\\n     * Relies on the `_update` mechanism.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * NOTE: This function is not virtual, {_update} should be overridden instead\\n     */\\n    function _burn(address account, uint256 value) internal {\\n        if (account == address(0)) {\\n            revert ERC20InvalidSender(address(0));\\n        }\\n        _update(account, address(0), value);\\n    }\\n\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     *\\n     * Overrides to this logic should be done to the variant with an additional `bool emitEvent` argument.\\n     */\\n    function _approve(address owner, address spender, uint256 value) internal {\\n        _approve(owner, spender, value, true);\\n    }\\n\\n    /**\\n     * @dev Variant of {_approve} with an optional flag to enable or disable the {Approval} event.\\n     *\\n     * By default (when calling {_approve}) the flag is set to true. On the other hand, approval changes made by\\n     * `_spendAllowance` during the `transferFrom` operation set the flag to false. This saves gas by not emitting any\\n     * `Approval` event during `transferFrom` operations.\\n     *\\n     * Anyone who wishes to continue emitting `Approval` events on the`transferFrom` operation can force the flag to\\n     * true using the following override:\\n     * ```\\n     * function _approve(address owner, address spender, uint256 value, bool) internal virtual override {\\n     *     super._approve(owner, spender, value, true);\\n     * }\\n     * ```\\n     *\\n     * Requirements are the same as {_approve}.\\n     */\\n    function _approve(address owner, address spender, uint256 value, bool emitEvent) internal virtual {\\n        if (owner == address(0)) {\\n            revert ERC20InvalidApprover(address(0));\\n        }\\n        if (spender == address(0)) {\\n            revert ERC20InvalidSpender(address(0));\\n        }\\n        _allowances[owner][spender] = value;\\n        if (emitEvent) {\\n            emit Approval(owner, spender, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `value`.\\n     *\\n     * Does not update the allowance value in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Does not emit an {Approval} event.\\n     */\\n    function _spendAllowance(address owner, address spender, uint256 value) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            if (currentAllowance < value) {\\n                revert ERC20InsufficientAllowance(spender, currentAllowance, value);\\n            }\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - value, false);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc3e1fa9d1987f8d349dfb4d6fe93bf2ca014b52ba335cfac30bfe71e357e6f80\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\",\"keccak256\":\"0xc6a8ff0ea489379b61faa647490411b80102578440ab9d84e9a957cc12164e70\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0xaa761817f6cd7892fcf158b3c776b34551cde36f48ff9703d53898bc45a94ea2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant NOT_ENTERED = 1;\\n    uint256 private constant ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    /**\\n     * @dev Unauthorized reentrant call.\\n     */\\n    error ReentrancyGuardReentrantCall();\\n\\n    constructor() {\\n        _status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be NOT_ENTERED\\n        if (_status == ENTERED) {\\n            revert ReentrancyGuardReentrantCall();\\n        }\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0xf980daa263b661ab8ddee7d4fd833c7da7e7995e2c359ff1f17e67e4112f2236\",\"license\":\"MIT\"},\"contracts/pool/Pool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.20;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\\\";\\r\\nimport \\\"../token/LiquidityToken.sol\\\";\\r\\n\\r\\n\\r\\n//add possible error\\r\\nerror Pool__InvalidTokenRatio();\\r\\nerror Pool__ZeroLiquidityToken();\\r\\nerror Pool__InvalidToken();\\r\\n\\r\\ncontract Pool is LiquidityToken, ReentrancyGuard{\\r\\n    IERC20 private immutable i_token0;\\r\\n    IERC20 private immutable i_token1;\\r\\n\\r\\n    uint256 private s_reserve0;\\r\\n    uint256 private s_reserve1;\\r\\n\\r\\n    uint8 private immutable i_fee;\\r\\n\\r\\n    constructor (address token0, address token1, uint8 fee) LiquidityToken(\\\"TanoToken\\\", \\\"Taken\\\"){\\r\\n        i_token0 = IERC20(token0);\\r\\n        i_token1 = IERC20(token1);\\r\\n        i_fee = fee;\\r\\n    } \\r\\n\\r\\n    //add event\\r\\n    event SwapSuccess(\\r\\n        address tokenIn,\\r\\n        uint256 indexed amountIn,\\r\\n        address tokenOut,\\r\\n        uint256 indexed amountOut\\r\\n    );\\r\\n\\r\\n    event AddedLiquidity(\\r\\n        uint256 indexed liquidityToken,\\r\\n        address token0,\\r\\n        uint256 amount0,\\r\\n        address token1,\\r\\n        uint256 indexed amount1\\r\\n    );\\r\\n\\r\\n    event RemovedLiquidity(\\r\\n        uint256 indexed liquidityToken,\\r\\n        address token0,\\r\\n        uint256 amount0,\\r\\n        address token1,\\r\\n        uint256 indexed amount1\\r\\n    );\\r\\n    \\r\\n\\r\\n    function _updateLiquidity(uint256 res0, uint256 res1) internal {\\r\\n        s_reserve0 = res0;\\r\\n        s_reserve1 = res1;\\r\\n    }\\r\\n\\r\\n    function swap(address tokenIn, uint256 amountIn) external nonReentrant{\\r\\n        // Check if the token in is indeed the token we provide for swap\\r\\n        require(tokenIn == address(i_token0) || tokenIn == address(i_token1), \\\"Invalid Token\\\");\\r\\n\\r\\n        // Store the tokens in a temporary variable to minimize gas costs\\r\\n        IERC20 token0 = i_token0;\\r\\n        IERC20 token1 = i_token1;\\r\\n\\r\\n        uint8 fee = i_fee;\\r\\n\\r\\n        // Get amount in that we will receive\\r\\n        uint256 amountInWithFee = (amountIn * (10000 - fee)) / 1000;\\r\\n\\r\\n        // Get the reserves directly\\r\\n        uint256 rIn = tokenIn == address(token0) ? s_reserve0 : s_reserve1;\\r\\n        uint256 rOut = tokenIn == address(token0) ? s_reserve1 : s_reserve0;\\r\\n\\r\\n        // Check if the target token balance is enough\\r\\n        require(rOut >= amountIn, \\\"Insufficient Balance\\\");\\r\\n\\r\\n        // Get amount of token that sender will receive\\r\\n        uint256 amountOut = (amountInWithFee * rOut) / (rIn + amountInWithFee);\\r\\n\\r\\n        // Perform token transfer\\r\\n        require(IERC20(tokenIn).transferFrom(msg.sender, address(this), amountIn), \\\"Transfer token in failed\\\");\\r\\n\\r\\n        // Update reserves\\r\\n        _updateLiquidity(\\r\\n            tokenIn == address(token0) ? (rIn + amountInWithFee) : (rOut - amountOut),\\r\\n            tokenIn == address(token0) ? (rOut - amountOut) : (rIn + amountInWithFee)\\r\\n        );\\r\\n\\r\\n        // Transfer the output token to the sender\\r\\n        require(IERC20(token1).transfer(msg.sender, amountOut), \\\"Transfer token out failed\\\");\\r\\n\\r\\n        emit SwapSuccess(tokenIn, amountIn, address(token1), amountOut);\\r\\n    }\\r\\n\\r\\n    function addLiquidity(uint256 amount0, uint256 amount1) external {\\r\\n        uint256 reserve0 = s_reserve0;\\r\\n        uint256 reserve1 = s_reserve1;\\r\\n\\r\\n        //make sure non of the reserve is 0\\r\\n        if (reserve0 == 0 || reserve1 == 0) {\\r\\n            revert Pool__InvalidTokenRatio(); // If either reserve is zero, revert\\r\\n        }\\r\\n\\r\\n        //make sure the ratio remain the same\\r\\n        if(amount0 / amount1 != reserve0/reserve1){\\r\\n            revert Pool__InvalidTokenRatio();\\r\\n        }\\r\\n\\r\\n\\r\\n        //transfer the given amount of token from sender to contract address\\r\\n        IERC20 token0 = i_token0;\\r\\n        IERC20 token1 = i_token1;\\r\\n\\r\\n        token0.transferFrom(msg.sender, address(this), amount0);\\r\\n        token1.transferFrom(msg.sender, address(this), amount1);\\r\\n\\r\\n        //calculate token that the sender will get\\r\\n        uint256 liquidityTokenSupply = totalSupply();\\r\\n        uint256 liquidityTokens;\\r\\n\\r\\n        if(liquidityTokenSupply > 0){\\r\\n            liquidityTokens = amount0/reserve0 * liquidityTokenSupply;\\r\\n        }else{\\r\\n            liquidityTokens = sqrt(amount0 * amount1);\\r\\n        }\\r\\n\\r\\n        if (liquidityTokens == 0) revert Pool__ZeroLiquidityToken();\\r\\n        _mint(msg.sender, liquidityTokens);\\r\\n        _updateLiquidity(reserve0 + amount0, reserve1 + amount1);\\r\\n\\r\\n        emit AddedLiquidity(\\r\\n            liquidityTokens,\\r\\n            address(token0),\\r\\n            amount0,\\r\\n            address(token1),\\r\\n            amount1\\r\\n        );\\r\\n    }\\r\\n\\r\\n     function removeLiquidity(uint256 liquidityTokens) external nonReentrant {\\r\\n        (uint256 amount0, uint256 amount1) = getAmountsOnRemovingLiquidity(liquidityTokens);\\r\\n\\r\\n        _burn(msg.sender, liquidityTokens);\\r\\n        _updateLiquidity(s_reserve0 - amount0, s_reserve1 - amount1);\\r\\n\\r\\n        IERC20 token0 = i_token0; // gas optimization\\r\\n        IERC20 token1 = i_token1; // gas optimization\\r\\n\\r\\n        token0.transfer(msg.sender, amount0);\\r\\n        token1.transfer(msg.sender, amount1);\\r\\n\\r\\n        emit RemovedLiquidity(\\r\\n            liquidityTokens,\\r\\n            address(token0),\\r\\n            amount0,\\r\\n            address(token1),\\r\\n            amount1\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function getAmountsOnRemovingLiquidity(uint256 liquidityTokens) public view returns(uint256 amount0, uint256 amount1){\\r\\n        require(liquidityTokens > 0, \\\"0 Liquidity Tokens\\\");\\r\\n\\r\\n        // t = totalSupply of shares\\r\\n        // s = shares\\r\\n        // l = liquidity (reserve0 || reserve1)\\r\\n        // dl = liquidity to be removed (amount0 || amount1)\\r\\n\\r\\n        // The change in liquidity/token reserves should be propotional to shares burned\\r\\n        // t - s/t = l - dl/l\\r\\n        // dl = ls/t\\r\\n\\r\\n        // uint256 tokenBalance = balanceOf(msg.sender);\\r\\n\\r\\n        amount0 = (s_reserve0 * liquidityTokens) / totalSupply();\\r\\n        amount1 = (s_reserve1 * liquidityTokens) / totalSupply();\\r\\n    }\\r\\n\\r\\n     function sqrt(uint256 x) public pure returns (uint256) {\\r\\n        if (x == 0) {\\r\\n            return 0;\\r\\n        }\\r\\n\\r\\n        uint256 z = (x + 1) / 2; // Initial guess\\r\\n        uint256 y = x;\\r\\n\\r\\n        while (z < y) {\\r\\n            y = z;\\r\\n            z = (x / z + z) / 2; // Update guess\\r\\n        }\\r\\n\\r\\n        return y;\\r\\n    }\\r\\n\\r\\n    function getReserves() public view returns (uint256, uint256) {\\r\\n        return (s_reserve0, s_reserve1);\\r\\n    }\\r\\n\\r\\n    function getTokens() public view returns (address, address) {\\r\\n        return (address(i_token0), address(i_token1));\\r\\n    }\\r\\n\\r\\n    function getFee() external view returns (uint8) {\\r\\n        return i_fee;\\r\\n    }\\r\\n\\r\\n}\",\"keccak256\":\"0x7f4b4a866dc41c62fbd640900e98bd67ee5729235657ac472ddf7c74c8ecffcb\",\"license\":\"MIT\"},\"contracts/pool/PoolFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.20;\\r\\n\\r\\nimport \\\"./Pool.sol\\\";\\r\\n\\r\\nerror PoolFactory__PairAlreadyExists();\\r\\n\\r\\ncontract PoolFactory {\\r\\n    address[3][] private s_poolsList;\\r\\n    uint256 private poolIdCounter = 0; // Counter for pool IDs\\r\\n\\r\\n    struct PoolStruct {\\r\\n        address poolAddress;\\r\\n        uint8 fee;\\r\\n    }\\r\\n\\r\\n    struct PoolData {\\r\\n        uint256 id; // Unique identifier for each pool\\r\\n        address token0;\\r\\n        address token1;\\r\\n        uint256 reserve0;\\r\\n        uint256 reserve1;\\r\\n        uint256 totalSupply;\\r\\n        address liquidityToken;\\r\\n        uint8 fee;\\r\\n    }\\r\\n\\r\\n    mapping(address => mapping(address => PoolStruct)) private s_tokensToPool;\\r\\n\\r\\n    event PoolCreated(\\r\\n        uint256 indexed id,\\r\\n        address indexed token0,\\r\\n        address indexed token1,\\r\\n        uint8 fee,\\r\\n        address poolAddress\\r\\n    );\\r\\n\\r\\n    function createPool(\\r\\n        address token0,\\r\\n        address token1,\\r\\n        uint8 fee\\r\\n    ) external {\\r\\n        require(fee <= 100, \\\"Fee cannot be more than 1%\\\");\\r\\n        require(token0 != token1, \\\"Cannot trade same token\\\");\\r\\n\\r\\n        require(\\r\\n            s_tokensToPool[token0][token1].poolAddress == address(0) || \\r\\n            s_tokensToPool[token0][token1].fee != fee,\\r\\n            \\\"PoolFactory__PairAlreadyExists\\\"\\r\\n        );\\r\\n\\r\\n        Pool pool = new Pool(token0, token1, fee);\\r\\n        address poolAddress = address(pool);\\r\\n\\r\\n        s_tokensToPool[token0][token1] = PoolStruct(poolAddress, fee);\\r\\n        s_poolsList.push([token0, token1, poolAddress]);\\r\\n\\r\\n        emit PoolCreated(poolIdCounter, token0, token1, fee, poolAddress);\\r\\n\\r\\n        poolIdCounter++; // Increment the pool ID counter\\r\\n    }\\r\\n\\r\\n    function getPoolDetails() external view returns (PoolData[] memory) {\\r\\n        PoolData[] memory pools = new PoolData[](s_poolsList.length);\\r\\n\\r\\n        for (uint i = 0; i < s_poolsList.length; i++) {\\r\\n            address poolAddress = s_poolsList[i][2];\\r\\n            Pool pool = Pool(poolAddress);\\r\\n\\r\\n            (uint256 reserve0, uint256 reserve1) = pool.getReserves();\\r\\n\\r\\n            pools[i] = PoolData({\\r\\n                id: i, // Use the index as an ID\\r\\n                token0: s_poolsList[i][0],\\r\\n                token1: s_poolsList[i][1],\\r\\n                reserve0: reserve0,\\r\\n                reserve1: reserve1,\\r\\n                totalSupply: pool.totalSupply(),\\r\\n                liquidityToken: poolAddress,\\r\\n                fee: s_tokensToPool[s_poolsList[i][0]][s_poolsList[i][1]].fee\\r\\n            });\\r\\n        }\\r\\n\\r\\n        return pools;\\r\\n    }    \\r\\n\\r\\n    function getNumberOfPool() external view returns(uint256){\\r\\n        return s_poolsList.length;\\r\\n    }\\r\\n}\",\"keccak256\":\"0xe435b858170426d247f9138560370c5197ecdea8d377e5c12a6496dce7c5cc1f\",\"license\":\"MIT\"},\"contracts/token/LiquidityToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.20;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\r\\n\\r\\ncontract LiquidityToken is ERC20 {\\r\\n    constructor(string memory name, string memory symbol) ERC20(name, symbol){\\r\\n        \\r\\n    }\\r\\n}\",\"keccak256\":\"0x3946d3d2d44e90634b4a05a30201c90528ce1223af1886d8a80cc5054ddbd979\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6080604052600060015534801561001557600080fd5b506139da806100256000396000f3fe60806040523480156200001157600080fd5b5060043610620000465760003560e01c80639305df60146200004b578063aca34c11146200006d578063fcff55aa146200008f575b600080fd5b62000055620000af565b60405162000064919062000bbc565b60405180910390f35b62000077620000bb565b60405162000086919062000dbd565b60405180910390f35b620000ad6004803603810190620000a7919062000e48565b6200053b565b005b60008080549050905090565b60606000808054905067ffffffffffffffff811115620000e057620000df62000ea4565b5b6040519080825280602002602001820160405280156200011d57816020015b6200010962000a68565b815260200190600190039081620000ff5790505b50905060005b6000805490508110156200053357600080828154811062000149576200014862000ed3565b5b90600052602060002090600302016002600381106200016d576200016c62000ed3565b5b0160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905060008190506000808273ffffffffffffffffffffffffffffffffffffffff16630902f1ac6040518163ffffffff1660e01b81526004016040805180830381865afa158015620001e4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200020a919062000f33565b915091506040518061010001604052808681526020016000878154811062000237576200023662000ed3565b5b90600052602060002090600302016000600381106200025b576200025a62000ed3565b5b0160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200160008781548110620002af57620002ae62000ed3565b5b9060005260206000209060030201600160038110620002d357620002d262000ed3565b5b0160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018381526020018281526020018473ffffffffffffffffffffffffffffffffffffffff166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa15801562000368573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200038e919062000f7a565b81526020018573ffffffffffffffffffffffffffffffffffffffff16815260200160026000808981548110620003c957620003c862000ed3565b5b9060005260206000209060030201600060038110620003ed57620003ec62000ed3565b5b0160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600080898154811062000461576200046062000ed3565b5b906000526020600020906003020160016003811062000485576200048462000ed3565b5b0160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160149054906101000a900460ff1660ff168152508686815181106200050e576200050d62000ed3565b5b60200260200101819052505050505080806200052a9062000fdb565b91505062000123565b508091505090565b60648160ff16111562000585576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016200057c9062001089565b60405180910390fd5b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1603620005f6576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620005ed90620010fb565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff16600260008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614806200076357508060ff16600260008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160149054906101000a900460ff1660ff1614155b620007a5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016200079c906200116d565b60405180910390fd5b6000838383604051620007b89062000af2565b620007c693929190620011b1565b604051809103906000f080158015620007e3573d6000803e3d6000fd5b509050600081905060405180604001604052808273ffffffffffffffffffffffffffffffffffffffff1681526020018460ff16815250600260008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060208201518160000160146101000a81548160ff021916908360ff160217905550905050600060405180606001604052808773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152509080600181540180825580915050600190039060005260206000209060030201600090919091909150906003620009da92919062000b00565b508373ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff166001547f29f7c7a310a27e49669286207bb9c1d26582d9e39c7ab04376d9581145bf07b2868560405162000a3f929190620011ee565b60405180910390a46001600081548092919062000a5c9062000fdb565b91905055505050505050565b60405180610100016040528060008152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600081526020016000815260200160008152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600060ff1681525090565b612789806200121c83390190565b826003810192821562000b6f579160200282015b8281111562000b6e5782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055509160200191906001019062000b14565b5b50905062000b7e919062000b82565b5090565b5b8082111562000b9d57600081600090555060010162000b83565b5090565b6000819050919050565b62000bb68162000ba1565b82525050565b600060208201905062000bd3600083018462000bab565b92915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b62000c108162000ba1565b82525050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600062000c438262000c16565b9050919050565b62000c558162000c36565b82525050565b600060ff82169050919050565b62000c738162000c5b565b82525050565b6101008201600082015162000c92600085018262000c05565b50602082015162000ca7602085018262000c4a565b50604082015162000cbc604085018262000c4a565b50606082015162000cd1606085018262000c05565b50608082015162000ce6608085018262000c05565b5060a082015162000cfb60a085018262000c05565b5060c082015162000d1060c085018262000c4a565b5060e082015162000d2560e085018262000c68565b50505050565b600062000d39838362000c79565b6101008301905092915050565b6000602082019050919050565b600062000d608262000bd9565b62000d6c818562000be4565b935062000d798362000bf5565b8060005b8381101562000db057815162000d94888262000d2b565b975062000da18362000d46565b92505060018101905062000d7d565b5085935050505092915050565b6000602082019050818103600083015262000dd9818462000d53565b905092915050565b600080fd5b62000df18162000c36565b811462000dfd57600080fd5b50565b60008135905062000e118162000de6565b92915050565b62000e228162000c5b565b811462000e2e57600080fd5b50565b60008135905062000e428162000e17565b92915050565b60008060006060848603121562000e645762000e6362000de1565b5b600062000e748682870162000e00565b935050602062000e878682870162000e00565b925050604062000e9a8682870162000e31565b9150509250925092565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b62000f0d8162000ba1565b811462000f1957600080fd5b50565b60008151905062000f2d8162000f02565b92915050565b6000806040838503121562000f4d5762000f4c62000de1565b5b600062000f5d8582860162000f1c565b925050602062000f708582860162000f1c565b9150509250929050565b60006020828403121562000f935762000f9262000de1565b5b600062000fa38482850162000f1c565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600062000fe88262000ba1565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82036200101d576200101c62000fac565b5b600182019050919050565b600082825260208201905092915050565b7f4665652063616e6e6f74206265206d6f7265207468616e203125000000000000600082015250565b600062001071601a8362001028565b91506200107e8262001039565b602082019050919050565b60006020820190508181036000830152620010a48162001062565b9050919050565b7f43616e6e6f742074726164652073616d6520746f6b656e000000000000000000600082015250565b6000620010e360178362001028565b9150620010f082620010ab565b602082019050919050565b600060208201905081810360008301526200111681620010d4565b9050919050565b7f506f6f6c466163746f72795f5f50616972416c72656164794578697374730000600082015250565b600062001155601e8362001028565b915062001162826200111d565b602082019050919050565b60006020820190508181036000830152620011888162001146565b9050919050565b6200119a8162000c36565b82525050565b620011ab8162000c5b565b82525050565b6000606082019050620011c860008301866200118f565b620011d760208301856200118f565b620011e66040830184620011a0565b949350505050565b6000604082019050620012056000830185620011a0565b6200121460208301846200118f565b939250505056fe60e06040523480156200001157600080fd5b5060405162002789380380620027898339818101604052810190620000379190620001fc565b6040518060400160405280600981526020017f54616e6f546f6b656e00000000000000000000000000000000000000000000008152506040518060400160405280600581526020017f54616b656e00000000000000000000000000000000000000000000000000000081525081818160039081620000b69190620004d2565b508060049081620000c89190620004d2565b505050505060016005819055508273ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff16815250508173ffffffffffffffffffffffffffffffffffffffff1660a08173ffffffffffffffffffffffffffffffffffffffff16815250508060ff1660c08160ff1681525050505050620005b9565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620001868262000159565b9050919050565b620001988162000179565b8114620001a457600080fd5b50565b600081519050620001b8816200018d565b92915050565b600060ff82169050919050565b620001d681620001be565b8114620001e257600080fd5b50565b600081519050620001f681620001cb565b92915050565b60008060006060848603121562000218576200021762000154565b5b60006200022886828701620001a7565b93505060206200023b86828701620001a7565b92505060406200024e86828701620001e5565b9150509250925092565b600081519050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680620002da57607f821691505b602082108103620002f057620002ef62000292565b5b50919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b6000600883026200035a7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff826200031b565b6200036686836200031b565b95508019841693508086168417925050509392505050565b6000819050919050565b6000819050919050565b6000620003b3620003ad620003a7846200037e565b62000388565b6200037e565b9050919050565b6000819050919050565b620003cf8362000392565b620003e7620003de82620003ba565b84845462000328565b825550505050565b600090565b620003fe620003ef565b6200040b818484620003c4565b505050565b5b81811015620004335762000427600082620003f4565b60018101905062000411565b5050565b601f82111562000482576200044c81620002f6565b62000457846200030b565b8101602085101562000467578190505b6200047f62000476856200030b565b83018262000410565b50505b505050565b600082821c905092915050565b6000620004a76000198460080262000487565b1980831691505092915050565b6000620004c2838362000494565b9150826002028217905092915050565b620004dd8262000258565b67ffffffffffffffff811115620004f957620004f862000263565b5b620005058254620002c1565b6200051282828562000437565b600060209050601f8311600181146200054a576000841562000535578287015190505b620005418582620004b4565b865550620005b1565b601f1984166200055a86620002f6565b60005b8281101562000584578489015182556001820191506020850194506020810190506200055d565b86831015620005a45784890151620005a0601f89168262000494565b8355505b6001600288020188555050505b505050505050565b60805160a05160c0516121616200062860003960008181610ba20152610d000152600081816106de0152818161091501528181610b7701528181610c250152610cdb0152600081816106b9015281816108f001528181610b5601528181610bd00152610cb601526121616000f3fe608060405234801561001057600080fd5b506004361061010b5760003560e01c806370a08231116100a2578063a9059cbb11610071578063a9059cbb146102d0578063aa6ca80814610300578063ced72f871461031f578063d004f0f71461033d578063dd62ed3e146103595761010b565b806370a082311461024a57806395d89b411461027a5780639c8f9f23146102985780639cd441da146102b45761010b565b806323b872dd116100de57806323b872dd1461019b57806324be6375146101cb578063313ce567146101fc578063677342ce1461021a5761010b565b806306fdde03146101105780630902f1ac1461012e578063095ea7b31461014d57806318160ddd1461017d575b600080fd5b610118610389565b60405161012591906118d0565b60405180910390f35b61013661041b565b60405161014492919061190b565b60405180910390f35b610167600480360381019061016291906119c3565b61042c565b6040516101749190611a1e565b60405180910390f35b61018561044f565b6040516101929190611a39565b60405180910390f35b6101b560048036038101906101b09190611a54565b610459565b6040516101c29190611a1e565b60405180910390f35b6101e560048036038101906101e09190611aa7565b610488565b6040516101f392919061190b565b60405180910390f35b610204610517565b6040516102119190611af0565b60405180910390f35b610234600480360381019061022f9190611aa7565b610520565b6040516102419190611a39565b60405180910390f35b610264600480360381019061025f9190611b0b565b610595565b6040516102719190611a39565b60405180910390f35b6102826105dd565b60405161028f91906118d0565b60405180910390f35b6102b260048036038101906102ad9190611aa7565b61066f565b005b6102ce60048036038101906102c99190611b38565b610849565b005b6102ea60048036038101906102e591906119c3565b610b2e565b6040516102f79190611a1e565b60405180910390f35b610308610b51565b604051610316929190611b87565b60405180910390f35b610327610b9e565b6040516103349190611af0565b60405180910390f35b610357600480360381019061035291906119c3565b610bc6565b005b610373600480360381019061036e9190611bb0565b6110b5565b6040516103809190611a39565b60405180910390f35b60606003805461039890611c1f565b80601f01602080910402602001604051908101604052809291908181526020018280546103c490611c1f565b80156104115780601f106103e657610100808354040283529160200191610411565b820191906000526020600020905b8154815290600101906020018083116103f457829003601f168201915b5050505050905090565b600080600654600754915091509091565b60008061043761113c565b9050610444818585611144565b600191505092915050565b6000600254905090565b60008061046461113c565b9050610471858285611156565b61047c8585856111ea565b60019150509392505050565b600080600083116104ce576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104c590611c9c565b60405180910390fd5b6104d661044f565b836006546104e49190611ceb565b6104ee9190611d5c565b91506104f861044f565b836007546105069190611ceb565b6105109190611d5c565b9050915091565b60006012905090565b60008082036105325760009050610590565b600060026001846105439190611d8d565b61054d9190611d5c565b905060008390505b8082101561058a57819050600282838661056f9190611d5c565b6105799190611d8d565b6105839190611d5c565b9150610555565b80925050505b919050565b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b6060600480546105ec90611c1f565b80601f016020809104026020016040519081016040528092919081815260200182805461061890611c1f565b80156106655780601f1061063a57610100808354040283529160200191610665565b820191906000526020600020905b81548152906001019060200180831161064857829003601f168201915b5050505050905090565b6106776112de565b60008061068383610488565b915091506106913384611324565b6106b5826006546106a29190611dc1565b826007546106b09190611dc1565b6113a6565b60007f0000000000000000000000000000000000000000000000000000000000000000905060007f000000000000000000000000000000000000000000000000000000000000000090508173ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33866040518363ffffffff1660e01b815260040161073a929190611df5565b6020604051808303816000875af1158015610759573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061077d9190611e4a565b508073ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33856040518363ffffffff1660e01b81526004016107b9929190611df5565b6020604051808303816000875af11580156107d8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107fc9190611e4a565b5082857f47a132e4e9e9fd057fafaf86c87eac1f1beb455bf20382505e83022d9716337984878560405161083293929190611e77565b60405180910390a3505050506108466113b8565b50565b600060065490506000600754905060008214806108665750600081145b1561089d576040517f17a401a800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b80826108a99190611d5c565b83856108b59190611d5c565b146108ec576040517f17a401a800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60007f0000000000000000000000000000000000000000000000000000000000000000905060007f000000000000000000000000000000000000000000000000000000000000000090508173ffffffffffffffffffffffffffffffffffffffff166323b872dd3330896040518463ffffffff1660e01b815260040161097393929190611eae565b6020604051808303816000875af1158015610992573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109b69190611e4a565b508073ffffffffffffffffffffffffffffffffffffffff166323b872dd3330886040518463ffffffff1660e01b81526004016109f493929190611eae565b6020604051808303816000875af1158015610a13573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a379190611e4a565b506000610a4261044f565b9050600080821115610a6c57818689610a5b9190611d5c565b610a659190611ceb565b9050610a83565b610a808789610a7b9190611ceb565b610520565b90505b60008103610abd576040517f4aed4e4b00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b610ac733826113c2565b610ae78887610ad69190611d8d565b8887610ae29190611d8d565b6113a6565b86817f86c3929a230b573aa47cd83759aed11b800d147abc23e246dfeb5ebbd7a110e3868b87604051610b1c93929190611e77565b60405180910390a35050505050505050565b600080610b3961113c565b9050610b468185856111ea565b600191505092915050565b6000807f00000000000000000000000000000000000000000000000000000000000000007f0000000000000000000000000000000000000000000000000000000000000000915091509091565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b610bce6112de565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161480610c7357507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16145b610cb2576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ca990611f31565b60405180910390fd5b60007f0000000000000000000000000000000000000000000000000000000000000000905060007f0000000000000000000000000000000000000000000000000000000000000000905060007f0000000000000000000000000000000000000000000000000000000000000000905060006103e88260ff16612710610d379190611f5f565b61ffff1686610d469190611ceb565b610d509190611d5c565b905060008473ffffffffffffffffffffffffffffffffffffffff168773ffffffffffffffffffffffffffffffffffffffff1614610d8f57600754610d93565b6006545b905060008573ffffffffffffffffffffffffffffffffffffffff168873ffffffffffffffffffffffffffffffffffffffff1614610dd257600654610dd6565b6007545b905086811015610e1b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e1290611fe1565b60405180910390fd5b60008383610e299190611d8d565b8285610e359190611ceb565b610e3f9190611d5c565b90508873ffffffffffffffffffffffffffffffffffffffff166323b872dd33308b6040518463ffffffff1660e01b8152600401610e7e93929190611eae565b6020604051808303816000875af1158015610e9d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ec19190611e4a565b610f00576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ef79061204d565b60405180910390fd5b610faa8773ffffffffffffffffffffffffffffffffffffffff168a73ffffffffffffffffffffffffffffffffffffffff1614610f47578183610f429190611dc1565b610f54565b8484610f539190611d8d565b5b8873ffffffffffffffffffffffffffffffffffffffff168b73ffffffffffffffffffffffffffffffffffffffff1614610f98578585610f939190611d8d565b610fa5565b8284610fa49190611dc1565b5b6113a6565b8573ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33836040518363ffffffff1660e01b8152600401610fe5929190611df5565b6020604051808303816000875af1158015611004573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110289190611e4a565b611067576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161105e906120b9565b60405180910390fd5b80887f80044f7893845e3883418a4d784224b0d2d9606ca5f19c2a910401c2c62761b58b8960405161109a929190611b87565b60405180910390a3505050505050506110b16113b8565b5050565b6000600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b600033905090565b6111518383836001611444565b505050565b600061116284846110b5565b90507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff81146111e457818110156111d4578281836040517ffb8f41b20000000000000000000000000000000000000000000000000000000081526004016111cb939291906120d9565b60405180910390fd5b6111e384848484036000611444565b5b50505050565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff160361125c5760006040517f96c6fd1e0000000000000000000000000000000000000000000000000000000081526004016112539190612110565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16036112ce5760006040517fec442f050000000000000000000000000000000000000000000000000000000081526004016112c59190612110565b60405180910390fd5b6112d983838361161b565b505050565b60026005540361131a576040517f3ee5aeb500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6002600581905550565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16036113965760006040517f96c6fd1e00000000000000000000000000000000000000000000000000000000815260040161138d9190612110565b60405180910390fd5b6113a28260008361161b565b5050565b81600681905550806007819055505050565b6001600581905550565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16036114345760006040517fec442f0500000000000000000000000000000000000000000000000000000000815260040161142b9190612110565b60405180910390fd5b6114406000838361161b565b5050565b600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16036114b65760006040517fe602df050000000000000000000000000000000000000000000000000000000081526004016114ad9190612110565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16036115285760006040517f94280d6200000000000000000000000000000000000000000000000000000000815260040161151f9190612110565b60405180910390fd5b81600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508015611615578273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9258460405161160c9190611a39565b60405180910390a35b50505050565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff160361166d5780600260008282546116619190611d8d565b92505081905550611740565b60008060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050818110156116f9578381836040517fe450d38c0000000000000000000000000000000000000000000000000000000081526004016116f0939291906120d9565b60405180910390fd5b8181036000808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550505b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff160361178957806002600082825403925050819055506117d6565b806000808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055505b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040516118339190611a39565b60405180910390a3505050565b600081519050919050565b600082825260208201905092915050565b60005b8381101561187a57808201518184015260208101905061185f565b60008484015250505050565b6000601f19601f8301169050919050565b60006118a282611840565b6118ac818561184b565b93506118bc81856020860161185c565b6118c581611886565b840191505092915050565b600060208201905081810360008301526118ea8184611897565b905092915050565b6000819050919050565b611905816118f2565b82525050565b600060408201905061192060008301856118fc565b61192d60208301846118fc565b9392505050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061196482611939565b9050919050565b61197481611959565b811461197f57600080fd5b50565b6000813590506119918161196b565b92915050565b6119a0816118f2565b81146119ab57600080fd5b50565b6000813590506119bd81611997565b92915050565b600080604083850312156119da576119d9611934565b5b60006119e885828601611982565b92505060206119f9858286016119ae565b9150509250929050565b60008115159050919050565b611a1881611a03565b82525050565b6000602082019050611a336000830184611a0f565b92915050565b6000602082019050611a4e60008301846118fc565b92915050565b600080600060608486031215611a6d57611a6c611934565b5b6000611a7b86828701611982565b9350506020611a8c86828701611982565b9250506040611a9d868287016119ae565b9150509250925092565b600060208284031215611abd57611abc611934565b5b6000611acb848285016119ae565b91505092915050565b600060ff82169050919050565b611aea81611ad4565b82525050565b6000602082019050611b056000830184611ae1565b92915050565b600060208284031215611b2157611b20611934565b5b6000611b2f84828501611982565b91505092915050565b60008060408385031215611b4f57611b4e611934565b5b6000611b5d858286016119ae565b9250506020611b6e858286016119ae565b9150509250929050565b611b8181611959565b82525050565b6000604082019050611b9c6000830185611b78565b611ba96020830184611b78565b9392505050565b60008060408385031215611bc757611bc6611934565b5b6000611bd585828601611982565b9250506020611be685828601611982565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680611c3757607f821691505b602082108103611c4a57611c49611bf0565b5b50919050565b7f30204c697175696469747920546f6b656e730000000000000000000000000000600082015250565b6000611c8660128361184b565b9150611c9182611c50565b602082019050919050565b60006020820190508181036000830152611cb581611c79565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000611cf6826118f2565b9150611d01836118f2565b9250828202611d0f816118f2565b91508282048414831517611d2657611d25611cbc565b5b5092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000611d67826118f2565b9150611d72836118f2565b925082611d8257611d81611d2d565b5b828204905092915050565b6000611d98826118f2565b9150611da3836118f2565b9250828201905080821115611dbb57611dba611cbc565b5b92915050565b6000611dcc826118f2565b9150611dd7836118f2565b9250828203905081811115611def57611dee611cbc565b5b92915050565b6000604082019050611e0a6000830185611b78565b611e1760208301846118fc565b9392505050565b611e2781611a03565b8114611e3257600080fd5b50565b600081519050611e4481611e1e565b92915050565b600060208284031215611e6057611e5f611934565b5b6000611e6e84828501611e35565b91505092915050565b6000606082019050611e8c6000830186611b78565b611e9960208301856118fc565b611ea66040830184611b78565b949350505050565b6000606082019050611ec36000830186611b78565b611ed06020830185611b78565b611edd60408301846118fc565b949350505050565b7f496e76616c696420546f6b656e00000000000000000000000000000000000000600082015250565b6000611f1b600d8361184b565b9150611f2682611ee5565b602082019050919050565b60006020820190508181036000830152611f4a81611f0e565b9050919050565b600061ffff82169050919050565b6000611f6a82611f51565b9150611f7583611f51565b9250828203905061ffff811115611f8f57611f8e611cbc565b5b92915050565b7f496e73756666696369656e742042616c616e6365000000000000000000000000600082015250565b6000611fcb60148361184b565b9150611fd682611f95565b602082019050919050565b60006020820190508181036000830152611ffa81611fbe565b9050919050565b7f5472616e7366657220746f6b656e20696e206661696c65640000000000000000600082015250565b600061203760188361184b565b915061204282612001565b602082019050919050565b600060208201905081810360008301526120668161202a565b9050919050565b7f5472616e7366657220746f6b656e206f7574206661696c656400000000000000600082015250565b60006120a360198361184b565b91506120ae8261206d565b602082019050919050565b600060208201905081810360008301526120d281612096565b9050919050565b60006060820190506120ee6000830186611b78565b6120fb60208301856118fc565b61210860408301846118fc565b949350505050565b60006020820190506121256000830184611b78565b9291505056fea264697066735822122032c52d7fca1800e303780fa68c74a98aa2b3dbf7b15a1d13adbc628a6259779864736f6c63430008140033a26469706673582212203fb07a763a20e8d03144b47e0093049b6299d628eed483cf1aa214819313945f64736f6c63430008140033",
  "deployedBytecode": "0x60806040523480156200001157600080fd5b5060043610620000465760003560e01c80639305df60146200004b578063aca34c11146200006d578063fcff55aa146200008f575b600080fd5b62000055620000af565b60405162000064919062000bbc565b60405180910390f35b62000077620000bb565b60405162000086919062000dbd565b60405180910390f35b620000ad6004803603810190620000a7919062000e48565b6200053b565b005b60008080549050905090565b60606000808054905067ffffffffffffffff811115620000e057620000df62000ea4565b5b6040519080825280602002602001820160405280156200011d57816020015b6200010962000a68565b815260200190600190039081620000ff5790505b50905060005b6000805490508110156200053357600080828154811062000149576200014862000ed3565b5b90600052602060002090600302016002600381106200016d576200016c62000ed3565b5b0160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905060008190506000808273ffffffffffffffffffffffffffffffffffffffff16630902f1ac6040518163ffffffff1660e01b81526004016040805180830381865afa158015620001e4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200020a919062000f33565b915091506040518061010001604052808681526020016000878154811062000237576200023662000ed3565b5b90600052602060002090600302016000600381106200025b576200025a62000ed3565b5b0160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200160008781548110620002af57620002ae62000ed3565b5b9060005260206000209060030201600160038110620002d357620002d262000ed3565b5b0160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018381526020018281526020018473ffffffffffffffffffffffffffffffffffffffff166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa15801562000368573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200038e919062000f7a565b81526020018573ffffffffffffffffffffffffffffffffffffffff16815260200160026000808981548110620003c957620003c862000ed3565b5b9060005260206000209060030201600060038110620003ed57620003ec62000ed3565b5b0160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600080898154811062000461576200046062000ed3565b5b906000526020600020906003020160016003811062000485576200048462000ed3565b5b0160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160149054906101000a900460ff1660ff168152508686815181106200050e576200050d62000ed3565b5b60200260200101819052505050505080806200052a9062000fdb565b91505062000123565b508091505090565b60648160ff16111562000585576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016200057c9062001089565b60405180910390fd5b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1603620005f6576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620005ed90620010fb565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff16600260008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614806200076357508060ff16600260008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160149054906101000a900460ff1660ff1614155b620007a5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016200079c906200116d565b60405180910390fd5b6000838383604051620007b89062000af2565b620007c693929190620011b1565b604051809103906000f080158015620007e3573d6000803e3d6000fd5b509050600081905060405180604001604052808273ffffffffffffffffffffffffffffffffffffffff1681526020018460ff16815250600260008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060208201518160000160146101000a81548160ff021916908360ff160217905550905050600060405180606001604052808773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152509080600181540180825580915050600190039060005260206000209060030201600090919091909150906003620009da92919062000b00565b508373ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff166001547f29f7c7a310a27e49669286207bb9c1d26582d9e39c7ab04376d9581145bf07b2868560405162000a3f929190620011ee565b60405180910390a46001600081548092919062000a5c9062000fdb565b91905055505050505050565b60405180610100016040528060008152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600081526020016000815260200160008152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600060ff1681525090565b612789806200121c83390190565b826003810192821562000b6f579160200282015b8281111562000b6e5782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055509160200191906001019062000b14565b5b50905062000b7e919062000b82565b5090565b5b8082111562000b9d57600081600090555060010162000b83565b5090565b6000819050919050565b62000bb68162000ba1565b82525050565b600060208201905062000bd3600083018462000bab565b92915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b62000c108162000ba1565b82525050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600062000c438262000c16565b9050919050565b62000c558162000c36565b82525050565b600060ff82169050919050565b62000c738162000c5b565b82525050565b6101008201600082015162000c92600085018262000c05565b50602082015162000ca7602085018262000c4a565b50604082015162000cbc604085018262000c4a565b50606082015162000cd1606085018262000c05565b50608082015162000ce6608085018262000c05565b5060a082015162000cfb60a085018262000c05565b5060c082015162000d1060c085018262000c4a565b5060e082015162000d2560e085018262000c68565b50505050565b600062000d39838362000c79565b6101008301905092915050565b6000602082019050919050565b600062000d608262000bd9565b62000d6c818562000be4565b935062000d798362000bf5565b8060005b8381101562000db057815162000d94888262000d2b565b975062000da18362000d46565b92505060018101905062000d7d565b5085935050505092915050565b6000602082019050818103600083015262000dd9818462000d53565b905092915050565b600080fd5b62000df18162000c36565b811462000dfd57600080fd5b50565b60008135905062000e118162000de6565b92915050565b62000e228162000c5b565b811462000e2e57600080fd5b50565b60008135905062000e428162000e17565b92915050565b60008060006060848603121562000e645762000e6362000de1565b5b600062000e748682870162000e00565b935050602062000e878682870162000e00565b925050604062000e9a8682870162000e31565b9150509250925092565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b62000f0d8162000ba1565b811462000f1957600080fd5b50565b60008151905062000f2d8162000f02565b92915050565b6000806040838503121562000f4d5762000f4c62000de1565b5b600062000f5d8582860162000f1c565b925050602062000f708582860162000f1c565b9150509250929050565b60006020828403121562000f935762000f9262000de1565b5b600062000fa38482850162000f1c565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600062000fe88262000ba1565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82036200101d576200101c62000fac565b5b600182019050919050565b600082825260208201905092915050565b7f4665652063616e6e6f74206265206d6f7265207468616e203125000000000000600082015250565b600062001071601a8362001028565b91506200107e8262001039565b602082019050919050565b60006020820190508181036000830152620010a48162001062565b9050919050565b7f43616e6e6f742074726164652073616d6520746f6b656e000000000000000000600082015250565b6000620010e360178362001028565b9150620010f082620010ab565b602082019050919050565b600060208201905081810360008301526200111681620010d4565b9050919050565b7f506f6f6c466163746f72795f5f50616972416c72656164794578697374730000600082015250565b600062001155601e8362001028565b915062001162826200111d565b602082019050919050565b60006020820190508181036000830152620011888162001146565b9050919050565b6200119a8162000c36565b82525050565b620011ab8162000c5b565b82525050565b6000606082019050620011c860008301866200118f565b620011d760208301856200118f565b620011e66040830184620011a0565b949350505050565b6000604082019050620012056000830185620011a0565b6200121460208301846200118f565b939250505056fe60e06040523480156200001157600080fd5b5060405162002789380380620027898339818101604052810190620000379190620001fc565b6040518060400160405280600981526020017f54616e6f546f6b656e00000000000000000000000000000000000000000000008152506040518060400160405280600581526020017f54616b656e00000000000000000000000000000000000000000000000000000081525081818160039081620000b69190620004d2565b508060049081620000c89190620004d2565b505050505060016005819055508273ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff16815250508173ffffffffffffffffffffffffffffffffffffffff1660a08173ffffffffffffffffffffffffffffffffffffffff16815250508060ff1660c08160ff1681525050505050620005b9565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620001868262000159565b9050919050565b620001988162000179565b8114620001a457600080fd5b50565b600081519050620001b8816200018d565b92915050565b600060ff82169050919050565b620001d681620001be565b8114620001e257600080fd5b50565b600081519050620001f681620001cb565b92915050565b60008060006060848603121562000218576200021762000154565b5b60006200022886828701620001a7565b93505060206200023b86828701620001a7565b92505060406200024e86828701620001e5565b9150509250925092565b600081519050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680620002da57607f821691505b602082108103620002f057620002ef62000292565b5b50919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b6000600883026200035a7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff826200031b565b6200036686836200031b565b95508019841693508086168417925050509392505050565b6000819050919050565b6000819050919050565b6000620003b3620003ad620003a7846200037e565b62000388565b6200037e565b9050919050565b6000819050919050565b620003cf8362000392565b620003e7620003de82620003ba565b84845462000328565b825550505050565b600090565b620003fe620003ef565b6200040b818484620003c4565b505050565b5b81811015620004335762000427600082620003f4565b60018101905062000411565b5050565b601f82111562000482576200044c81620002f6565b62000457846200030b565b8101602085101562000467578190505b6200047f62000476856200030b565b83018262000410565b50505b505050565b600082821c905092915050565b6000620004a76000198460080262000487565b1980831691505092915050565b6000620004c2838362000494565b9150826002028217905092915050565b620004dd8262000258565b67ffffffffffffffff811115620004f957620004f862000263565b5b620005058254620002c1565b6200051282828562000437565b600060209050601f8311600181146200054a576000841562000535578287015190505b620005418582620004b4565b865550620005b1565b601f1984166200055a86620002f6565b60005b8281101562000584578489015182556001820191506020850194506020810190506200055d565b86831015620005a45784890151620005a0601f89168262000494565b8355505b6001600288020188555050505b505050505050565b60805160a05160c0516121616200062860003960008181610ba20152610d000152600081816106de0152818161091501528181610b7701528181610c250152610cdb0152600081816106b9015281816108f001528181610b5601528181610bd00152610cb601526121616000f3fe608060405234801561001057600080fd5b506004361061010b5760003560e01c806370a08231116100a2578063a9059cbb11610071578063a9059cbb146102d0578063aa6ca80814610300578063ced72f871461031f578063d004f0f71461033d578063dd62ed3e146103595761010b565b806370a082311461024a57806395d89b411461027a5780639c8f9f23146102985780639cd441da146102b45761010b565b806323b872dd116100de57806323b872dd1461019b57806324be6375146101cb578063313ce567146101fc578063677342ce1461021a5761010b565b806306fdde03146101105780630902f1ac1461012e578063095ea7b31461014d57806318160ddd1461017d575b600080fd5b610118610389565b60405161012591906118d0565b60405180910390f35b61013661041b565b60405161014492919061190b565b60405180910390f35b610167600480360381019061016291906119c3565b61042c565b6040516101749190611a1e565b60405180910390f35b61018561044f565b6040516101929190611a39565b60405180910390f35b6101b560048036038101906101b09190611a54565b610459565b6040516101c29190611a1e565b60405180910390f35b6101e560048036038101906101e09190611aa7565b610488565b6040516101f392919061190b565b60405180910390f35b610204610517565b6040516102119190611af0565b60405180910390f35b610234600480360381019061022f9190611aa7565b610520565b6040516102419190611a39565b60405180910390f35b610264600480360381019061025f9190611b0b565b610595565b6040516102719190611a39565b60405180910390f35b6102826105dd565b60405161028f91906118d0565b60405180910390f35b6102b260048036038101906102ad9190611aa7565b61066f565b005b6102ce60048036038101906102c99190611b38565b610849565b005b6102ea60048036038101906102e591906119c3565b610b2e565b6040516102f79190611a1e565b60405180910390f35b610308610b51565b604051610316929190611b87565b60405180910390f35b610327610b9e565b6040516103349190611af0565b60405180910390f35b610357600480360381019061035291906119c3565b610bc6565b005b610373600480360381019061036e9190611bb0565b6110b5565b6040516103809190611a39565b60405180910390f35b60606003805461039890611c1f565b80601f01602080910402602001604051908101604052809291908181526020018280546103c490611c1f565b80156104115780601f106103e657610100808354040283529160200191610411565b820191906000526020600020905b8154815290600101906020018083116103f457829003601f168201915b5050505050905090565b600080600654600754915091509091565b60008061043761113c565b9050610444818585611144565b600191505092915050565b6000600254905090565b60008061046461113c565b9050610471858285611156565b61047c8585856111ea565b60019150509392505050565b600080600083116104ce576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104c590611c9c565b60405180910390fd5b6104d661044f565b836006546104e49190611ceb565b6104ee9190611d5c565b91506104f861044f565b836007546105069190611ceb565b6105109190611d5c565b9050915091565b60006012905090565b60008082036105325760009050610590565b600060026001846105439190611d8d565b61054d9190611d5c565b905060008390505b8082101561058a57819050600282838661056f9190611d5c565b6105799190611d8d565b6105839190611d5c565b9150610555565b80925050505b919050565b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b6060600480546105ec90611c1f565b80601f016020809104026020016040519081016040528092919081815260200182805461061890611c1f565b80156106655780601f1061063a57610100808354040283529160200191610665565b820191906000526020600020905b81548152906001019060200180831161064857829003601f168201915b5050505050905090565b6106776112de565b60008061068383610488565b915091506106913384611324565b6106b5826006546106a29190611dc1565b826007546106b09190611dc1565b6113a6565b60007f0000000000000000000000000000000000000000000000000000000000000000905060007f000000000000000000000000000000000000000000000000000000000000000090508173ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33866040518363ffffffff1660e01b815260040161073a929190611df5565b6020604051808303816000875af1158015610759573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061077d9190611e4a565b508073ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33856040518363ffffffff1660e01b81526004016107b9929190611df5565b6020604051808303816000875af11580156107d8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107fc9190611e4a565b5082857f47a132e4e9e9fd057fafaf86c87eac1f1beb455bf20382505e83022d9716337984878560405161083293929190611e77565b60405180910390a3505050506108466113b8565b50565b600060065490506000600754905060008214806108665750600081145b1561089d576040517f17a401a800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b80826108a99190611d5c565b83856108b59190611d5c565b146108ec576040517f17a401a800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60007f0000000000000000000000000000000000000000000000000000000000000000905060007f000000000000000000000000000000000000000000000000000000000000000090508173ffffffffffffffffffffffffffffffffffffffff166323b872dd3330896040518463ffffffff1660e01b815260040161097393929190611eae565b6020604051808303816000875af1158015610992573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109b69190611e4a565b508073ffffffffffffffffffffffffffffffffffffffff166323b872dd3330886040518463ffffffff1660e01b81526004016109f493929190611eae565b6020604051808303816000875af1158015610a13573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a379190611e4a565b506000610a4261044f565b9050600080821115610a6c57818689610a5b9190611d5c565b610a659190611ceb565b9050610a83565b610a808789610a7b9190611ceb565b610520565b90505b60008103610abd576040517f4aed4e4b00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b610ac733826113c2565b610ae78887610ad69190611d8d565b8887610ae29190611d8d565b6113a6565b86817f86c3929a230b573aa47cd83759aed11b800d147abc23e246dfeb5ebbd7a110e3868b87604051610b1c93929190611e77565b60405180910390a35050505050505050565b600080610b3961113c565b9050610b468185856111ea565b600191505092915050565b6000807f00000000000000000000000000000000000000000000000000000000000000007f0000000000000000000000000000000000000000000000000000000000000000915091509091565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b610bce6112de565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161480610c7357507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16145b610cb2576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ca990611f31565b60405180910390fd5b60007f0000000000000000000000000000000000000000000000000000000000000000905060007f0000000000000000000000000000000000000000000000000000000000000000905060007f0000000000000000000000000000000000000000000000000000000000000000905060006103e88260ff16612710610d379190611f5f565b61ffff1686610d469190611ceb565b610d509190611d5c565b905060008473ffffffffffffffffffffffffffffffffffffffff168773ffffffffffffffffffffffffffffffffffffffff1614610d8f57600754610d93565b6006545b905060008573ffffffffffffffffffffffffffffffffffffffff168873ffffffffffffffffffffffffffffffffffffffff1614610dd257600654610dd6565b6007545b905086811015610e1b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e1290611fe1565b60405180910390fd5b60008383610e299190611d8d565b8285610e359190611ceb565b610e3f9190611d5c565b90508873ffffffffffffffffffffffffffffffffffffffff166323b872dd33308b6040518463ffffffff1660e01b8152600401610e7e93929190611eae565b6020604051808303816000875af1158015610e9d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ec19190611e4a565b610f00576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ef79061204d565b60405180910390fd5b610faa8773ffffffffffffffffffffffffffffffffffffffff168a73ffffffffffffffffffffffffffffffffffffffff1614610f47578183610f429190611dc1565b610f54565b8484610f539190611d8d565b5b8873ffffffffffffffffffffffffffffffffffffffff168b73ffffffffffffffffffffffffffffffffffffffff1614610f98578585610f939190611d8d565b610fa5565b8284610fa49190611dc1565b5b6113a6565b8573ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33836040518363ffffffff1660e01b8152600401610fe5929190611df5565b6020604051808303816000875af1158015611004573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110289190611e4a565b611067576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161105e906120b9565b60405180910390fd5b80887f80044f7893845e3883418a4d784224b0d2d9606ca5f19c2a910401c2c62761b58b8960405161109a929190611b87565b60405180910390a3505050505050506110b16113b8565b5050565b6000600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b600033905090565b6111518383836001611444565b505050565b600061116284846110b5565b90507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff81146111e457818110156111d4578281836040517ffb8f41b20000000000000000000000000000000000000000000000000000000081526004016111cb939291906120d9565b60405180910390fd5b6111e384848484036000611444565b5b50505050565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff160361125c5760006040517f96c6fd1e0000000000000000000000000000000000000000000000000000000081526004016112539190612110565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16036112ce5760006040517fec442f050000000000000000000000000000000000000000000000000000000081526004016112c59190612110565b60405180910390fd5b6112d983838361161b565b505050565b60026005540361131a576040517f3ee5aeb500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6002600581905550565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16036113965760006040517f96c6fd1e00000000000000000000000000000000000000000000000000000000815260040161138d9190612110565b60405180910390fd5b6113a28260008361161b565b5050565b81600681905550806007819055505050565b6001600581905550565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16036114345760006040517fec442f0500000000000000000000000000000000000000000000000000000000815260040161142b9190612110565b60405180910390fd5b6114406000838361161b565b5050565b600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16036114b65760006040517fe602df050000000000000000000000000000000000000000000000000000000081526004016114ad9190612110565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16036115285760006040517f94280d6200000000000000000000000000000000000000000000000000000000815260040161151f9190612110565b60405180910390fd5b81600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508015611615578273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9258460405161160c9190611a39565b60405180910390a35b50505050565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff160361166d5780600260008282546116619190611d8d565b92505081905550611740565b60008060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050818110156116f9578381836040517fe450d38c0000000000000000000000000000000000000000000000000000000081526004016116f0939291906120d9565b60405180910390fd5b8181036000808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550505b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff160361178957806002600082825403925050819055506117d6565b806000808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055505b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040516118339190611a39565b60405180910390a3505050565b600081519050919050565b600082825260208201905092915050565b60005b8381101561187a57808201518184015260208101905061185f565b60008484015250505050565b6000601f19601f8301169050919050565b60006118a282611840565b6118ac818561184b565b93506118bc81856020860161185c565b6118c581611886565b840191505092915050565b600060208201905081810360008301526118ea8184611897565b905092915050565b6000819050919050565b611905816118f2565b82525050565b600060408201905061192060008301856118fc565b61192d60208301846118fc565b9392505050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061196482611939565b9050919050565b61197481611959565b811461197f57600080fd5b50565b6000813590506119918161196b565b92915050565b6119a0816118f2565b81146119ab57600080fd5b50565b6000813590506119bd81611997565b92915050565b600080604083850312156119da576119d9611934565b5b60006119e885828601611982565b92505060206119f9858286016119ae565b9150509250929050565b60008115159050919050565b611a1881611a03565b82525050565b6000602082019050611a336000830184611a0f565b92915050565b6000602082019050611a4e60008301846118fc565b92915050565b600080600060608486031215611a6d57611a6c611934565b5b6000611a7b86828701611982565b9350506020611a8c86828701611982565b9250506040611a9d868287016119ae565b9150509250925092565b600060208284031215611abd57611abc611934565b5b6000611acb848285016119ae565b91505092915050565b600060ff82169050919050565b611aea81611ad4565b82525050565b6000602082019050611b056000830184611ae1565b92915050565b600060208284031215611b2157611b20611934565b5b6000611b2f84828501611982565b91505092915050565b60008060408385031215611b4f57611b4e611934565b5b6000611b5d858286016119ae565b9250506020611b6e858286016119ae565b9150509250929050565b611b8181611959565b82525050565b6000604082019050611b9c6000830185611b78565b611ba96020830184611b78565b9392505050565b60008060408385031215611bc757611bc6611934565b5b6000611bd585828601611982565b9250506020611be685828601611982565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680611c3757607f821691505b602082108103611c4a57611c49611bf0565b5b50919050565b7f30204c697175696469747920546f6b656e730000000000000000000000000000600082015250565b6000611c8660128361184b565b9150611c9182611c50565b602082019050919050565b60006020820190508181036000830152611cb581611c79565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000611cf6826118f2565b9150611d01836118f2565b9250828202611d0f816118f2565b91508282048414831517611d2657611d25611cbc565b5b5092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000611d67826118f2565b9150611d72836118f2565b925082611d8257611d81611d2d565b5b828204905092915050565b6000611d98826118f2565b9150611da3836118f2565b9250828201905080821115611dbb57611dba611cbc565b5b92915050565b6000611dcc826118f2565b9150611dd7836118f2565b9250828203905081811115611def57611dee611cbc565b5b92915050565b6000604082019050611e0a6000830185611b78565b611e1760208301846118fc565b9392505050565b611e2781611a03565b8114611e3257600080fd5b50565b600081519050611e4481611e1e565b92915050565b600060208284031215611e6057611e5f611934565b5b6000611e6e84828501611e35565b91505092915050565b6000606082019050611e8c6000830186611b78565b611e9960208301856118fc565b611ea66040830184611b78565b949350505050565b6000606082019050611ec36000830186611b78565b611ed06020830185611b78565b611edd60408301846118fc565b949350505050565b7f496e76616c696420546f6b656e00000000000000000000000000000000000000600082015250565b6000611f1b600d8361184b565b9150611f2682611ee5565b602082019050919050565b60006020820190508181036000830152611f4a81611f0e565b9050919050565b600061ffff82169050919050565b6000611f6a82611f51565b9150611f7583611f51565b9250828203905061ffff811115611f8f57611f8e611cbc565b5b92915050565b7f496e73756666696369656e742042616c616e6365000000000000000000000000600082015250565b6000611fcb60148361184b565b9150611fd682611f95565b602082019050919050565b60006020820190508181036000830152611ffa81611fbe565b9050919050565b7f5472616e7366657220746f6b656e20696e206661696c65640000000000000000600082015250565b600061203760188361184b565b915061204282612001565b602082019050919050565b600060208201905081810360008301526120668161202a565b9050919050565b7f5472616e7366657220746f6b656e206f7574206661696c656400000000000000600082015250565b60006120a360198361184b565b91506120ae8261206d565b602082019050919050565b600060208201905081810360008301526120d281612096565b9050919050565b60006060820190506120ee6000830186611b78565b6120fb60208301856118fc565b61210860408301846118fc565b949350505050565b60006020820190506121256000830184611b78565b9291505056fea264697066735822122032c52d7fca1800e303780fa68c74a98aa2b3dbf7b15a1d13adbc628a6259779864736f6c63430008140033a26469706673582212203fb07a763a20e8d03144b47e0093049b6299d628eed483cf1aa214819313945f64736f6c63430008140033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1475,
        "contract": "contracts/pool/PoolFactory.sol:PoolFactory",
        "label": "s_poolsList",
        "offset": 0,
        "slot": "0",
        "type": "t_array(t_array(t_address)3_storage)dyn_storage"
      },
      {
        "astId": 1478,
        "contract": "contracts/pool/PoolFactory.sol:PoolFactory",
        "label": "poolIdCounter",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 1507,
        "contract": "contracts/pool/PoolFactory.sol:PoolFactory",
        "label": "s_tokensToPool",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_mapping(t_address,t_struct(PoolStruct)1483_storage))"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)3_storage": {
        "base": "t_address",
        "encoding": "inplace",
        "label": "address[3]",
        "numberOfBytes": "96"
      },
      "t_array(t_array(t_address)3_storage)dyn_storage": {
        "base": "t_array(t_address)3_storage",
        "encoding": "dynamic_array",
        "label": "address[3][]",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_mapping(t_address,t_struct(PoolStruct)1483_storage))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => struct PoolFactory.PoolStruct))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_struct(PoolStruct)1483_storage)"
      },
      "t_mapping(t_address,t_struct(PoolStruct)1483_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct PoolFactory.PoolStruct)",
        "numberOfBytes": "32",
        "value": "t_struct(PoolStruct)1483_storage"
      },
      "t_struct(PoolStruct)1483_storage": {
        "encoding": "inplace",
        "label": "struct PoolFactory.PoolStruct",
        "members": [
          {
            "astId": 1480,
            "contract": "contracts/pool/PoolFactory.sol:PoolFactory",
            "label": "poolAddress",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 1482,
            "contract": "contracts/pool/PoolFactory.sol:PoolFactory",
            "label": "fee",
            "offset": 20,
            "slot": "0",
            "type": "t_uint8"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}